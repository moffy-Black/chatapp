---
apiVersion: apps/v1
kind: Deployment # Type of Kubernetes resource
metadata:
  name: chat-app # Unique name of the Kubernetes resource
spec:
  replicas: 3 # Number of pods to run at any given time
  selector:
    matchLabels:
      app: chat-app # This deployment applies to any Pods matching the specified label
  template: # This deployment will create a set of pods using the configurations in this template
    metadata:
      labels: # The labels that will be applied to all of the pods in this deployment
        app: chat-app
    spec:
      containers:
        - name: chat-app
          image: moffyblack/chat-app:1.0.1
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
            - containerPort: 8080 # Should match the port number that the Go application listens on
          env: # Environment variables passed to the container
            - name: REDIS_LEADER_HOST
              value: redis-leader
            - name: REDIS_LEADER_PORT
              value: "6379"
            - name: REDIS_FOLLOWER_HOST
              value: redis-follower
            - name: REDIS_FOLLOWER_PORT
              value: "6379"
            - name: REDIS_PUBSUB_HOST
              value: redis-pubsub
            - name: REDIS_PUBSUB_PORT
              value: "6379"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
---
apiVersion: v1
kind: Service # Type of kubernetes resource
metadata:
  name: chat-app-service # Unique name of the resource
spec:
  type: NodePort # Expose the Pods by opening a port on each Node and proxing it to the service.
  ports: # Take incoming HTTP requests on port 9090 and forward them to the targetPort of 8080
    - name: http
      port: 9090
      targetPort: 8080
  selector:
    app: chat-app # Map any pod with label `app=chat-app` to this service
